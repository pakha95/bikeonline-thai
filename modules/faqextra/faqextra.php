<?php

 /**

 * Prestashop Modules & Themen End User License Agreement
 *
 * This End User License Agreement ("EULA") is a legal agreement between you and Presta-Apps ltd.
 * ( here in referred to as "we" or "us" ) with regard to Prestashop Modules & Themes
 * (herein referred to as "Software Product" or "Software").
 * By installing or using the Software Product you agree to be bound by the terms of this EULA.
 *
 * 1. Eligible Licensees. This Software is available for license solely to Software Owners,
 * with no right of duplication or further distribution, licensing, or sub-licensing.
 * A Software Owner is someone who legally obtained a copy of the Software Product via Prestashop Store.
 *
 * 2. License Grant. We grant you a personal/one commercial, non-transferable and non-exclusive right to use the copy
 * of the Software obtained via Prestashop Store. Modifying, translating, renting, copying, transferring or assigning
 * all or part of the Software, or any rights granted hereunder, to any other persons and removing any proprietary
 * notices, labels or marks from the Software is strictly prohibited. Furthermore, you hereby agree not to create
 * derivative works based on the Software. You may not transfer this Software.
 *
 * 3. Copyright. The Software is licensed, not sold. You acknowledge that no title to the intellectual property in the
 * Software is transferred to you. You further acknowledge that title and full ownership rights to the Software will
 * remain the exclusive property of Presta-Apps Mobile, and you will not acquire any rights to the Software,
 * except as expressly set forth above.
 *
 * 4. Reverse Engineering. You agree that you will not attempt, and if you are a corporation,
 * you will use your best efforts to prevent your employees and contractors from attempting to reverse compile, modify,
 * translate or disassemble the Software in whole or in part. Any failure to comply with the above or any other terms
 * and conditions contained herein will result in the automatic termination of this license.
 *
 * 5. Disclaimer of Warranty. The Software is provided "AS IS" without warranty of any kind. We disclaim and make no
 * express or implied warranties and specifically disclaim the warranties of merchantability, fitness for a particular
 * purpose and non-infringement of third-party rights. The entire risk as to the quality and performance of the Software
 * is with you. We do not warrant that the functions contained in the Software will meet your requirements or that the
 * operation of the Software will be error-free.
 *
 * 6. Limitation of Liability. Our entire liability and your exclusive remedy under this EULA shall not exceed the price
 * paid for the Software, if any. In no event shall we be liable to you for any consequential, special, incidental or
 * indirect damages of any kind arising out of the use or inability to use the software.
 *
 * 7. Rental. You may not loan, rent, or lease the Software.
 *
 * 8. Updates and Upgrades. All updates and upgrades of the Software from a previously released version are governed by
 * the terms and conditions of this EULA.
 *
 * 9. Support. Support for the Software Product is provided by Presta-Apps ltd. For product support, please send an
 * email to support at info@iniweb.de
 *
 * 10. No Liability for Consequential Damages. In no event shall we be liable for any damages whatsoever
 * (including, without limitation, incidental, direct, indirect special and consequential damages, damages for loss
 * of business profits, business interruption, loss of business information, or other pecuniary loss) arising out of
 * the use or inability to use the Software Product. Because some states/countries do not allow the exclusion or
 * limitation of liability for consequential or incidental damages, the above limitation may not apply to you.
 *
 * 11. Indemnification by You. You agree to indemnify, hold harmless and defend us from and against any claims or
 * lawsuits, including attorney's fees that arise or result from the use or distribution of the Software in violation
 * of this Agreement.
 *
 * @author    Presta-Apps Limited
 * @website   www.presta-apps.com
 * @contact   info@presta-apps.com
 * @copyright 2009-2016 Presta-Apps Ltd.
 * @license   Proprietary

 */


 require dirname(__FILE__) . '/inixframe/loader.php'; class FaqExtra extends Inix2Module { function __construct() { $this->name = 'faqextra'; $this->tab = 'front_office_features'; $this->version = '2.0.3'; $this->author = 'Presta-Apps'; $this->displayName = $this->l('FAQ Extra'); $this->description = $this->l('Frequently Asked Questions'); $this->need_instance = 0; $this->ps_versions_compliancy = array('min' => '1.5.1.0', 'max' => '1.7'); parent::__construct(); } public function install() { $this->install_hooks = array('displayLeftColumn', 'displayRightColumn', 'ModuleRoutes', 'displayFooter', 'displayHeader'); $this->install_tabs = array( array('class' => 'AdminFaqCategories', 'name' => 'FAQ Categories', 'parent' => 'AdminParentModulesSf'), array('class' => 'AdminFaqContent', 'name' => 'FAQ Content', 'parent' => 'AdminParentModulesSf'), ); foreach (Language::getLanguages(false) as $language) { $init_block_name[$language['id_lang']] = 'FAQ'; $init_link_rewrite[$language['id_lang']] = 'faq'; } Configuration::updateValue('FAQ_BLOCK_NAME', $init_block_name); Configuration::updateValue('FAQ_BLOCK_COL', 0); Configuration::updateValue('FAQ_BLOCK_CAT', 1); Configuration::updateValue('FAQ_BLOCK_NUM', 5); $install = parent::install(); if ($install) { $faq = new FAQCategory(); $faq->id_parent = 0; $faq->level_depth = 1; $faq->active = 1; $faq->active = 1; $faq->indexation = 1; $faq->name = $init_block_name; $faq->link_rewrite = $init_link_rewrite; $faq->save(true); } return $install; } public function uninstall() { Configuration::deleteByName('FAQ_BLOCK_NAME'); Configuration::deleteByName('FAQ_BLOCK_COL'); Configuration::deleteByName('FAQ_BLOCK_CAT'); Configuration::deleteByName('FAQ_BLOCK_NUM'); $this->uninstall_tabs = array('AdminFaqCategories', 'AdminFaqContent'); return parent::uninstall(); } public function hookDisplayLeftColumn() { if (Configuration::get('FAQ_BLOCK_COL') == 1) return $this->displayBlockColumn(); } public function hookDisplayRightColumn() { if (Configuration::get('FAQ_BLOCK_COL') == 2) return $this->displayBlockColumn(); } public function displayBlockColumn() { $id_shop = null; if (Shop::isFeatureActive()) $id_shop = (int) $this->context->shop->id; $current_category = Configuration::get('FAQ_BLOCK_CAT'); $this->context->smarty->assign( array( 'faq_module_name' => Configuration::get('FAQ_BLOCK_NAME', $this->context->language->id), 'faq_module_link' => $this->context->link->getFAQCategoryLink($current_category), 'faq_pages' => FAQ::getFAQPages($this->context->language->id, (int) ($current_category), true, $id_shop, Configuration::get('FAQ_BLOCK_NUM')), 'FAQ_DISPLAY' => Configuration::get('FAQ_DISPLAY'), ) ); $this->context->controller->addCSS($this->getFramePathUri() . 'css/font-awesome.css'); $this->context->controller->addCSS($this->getPathUri() . 'views/css/faq_column.css'); $this->context->controller->addCSS($this->getPathUri() . 'views/css/sss.css'); $this->context->controller->addJS($this->getPathUri() . 'views/js/sss.js'); return $this->display(__FILE__, 'faq_hook.tpl'); } public function hookDisplayHeader($param) { if(Tools::version_compare(_PS_VERSION_, '1.7.0', '>=')){ $this->context->controller->addCSS($this->getFramePathUri() . 'css/font-awesome.css'); $this->context->controller->addCSS($this->getPathUri() . 'views/css/faq_column.css'); $this->context->controller->addCSS($this->getPathUri() . 'views/css/sss.css'); $this->context->controller->addJS($this->getPathUri() . 'views/js/sss.js'); } } public function getContent() { $this->object_table = 'configuration'; $this->className = 'Configuration'; $this->object_identifier = 'id_configuration'; if (!$this->context->controller instanceof AdminModulesController) { $this->bootstrap = 1; } $this->context = Context::getContext(); $this->token = Tools::getAdminTokenLite('AdminModules'); $this->override_folder = 'inixframe/'; $this->tpl_folder = 'inixframe/'; if (!$this->context->controller instanceof AdminModulesController) { $this->bootstrap = 1; } $pos_options = array( array( 'FAQ_BLOCK_COL' => 0, 'name' => $this->l('Dont show') ), array( 'FAQ_BLOCK_COL' => 1, 'name' => $this->l('Left column') ), array( 'FAQ_BLOCK_COL' => 2, 'name' => $this->l('Right column') ), ); $categories = FAQCategory::getCategories($this->context->language->id, false); $cat_options = FAQCategory::recurseFAQCategoryOptions($categories, $categories[0][1], 1, 'FAQ_BLOCK_CAT'); $this->fields_options = array( 'general' => array( 'title' => '', 'icon' => '', 'description' => '', 'info' => '', 'fields' => array( 'FAQ_BLOCK_COL' => array( 'type' => 'select', 'title' => $this->l('FAQ block position:'), 'name' => 'FAQ_BLOCK_COL', 'required' => true, 'list' => $pos_options, 'identifier' => 'FAQ_BLOCK_COL', 'cast' => 'intval', 'validation' => 'isUnsignedInt' ), 'FAQ_BLOCK_NAME' => array( 'type' => 'textLang', 'title' => $this->l('FAQ block title:'), 'name' => 'FAQ_BLOCK_NAME', 'size' => 20, 'lang' => true, 'required' => true, 'cast' => 'strval', 'validation' => 'isGenericName', ), 'FAQ_BLOCK_NUM' => array( 'type' => 'text', 'title' => $this->l('Number to show:'), 'name' => 'FAQ_BLOCK_NUM', 'size' => 1, 'required' => true, 'cast' => 'intval', 'validation' => 'isUnsignedInt' ), 'FAQ_BLOCK_CAT' => array( 'type' => 'select', 'title' => $this->l('FAQ Category:'), 'name' => 'FAQ_BLOCK_CAT', 'required' => true, 'list' => $cat_options, 'identifier' => 'FAQ_BLOCK_CAT', 'cast' => 'intval', 'validation' => 'isUnsignedInt' ), 'FAQ_DISPLAY' => array( 'title' => $this->l('Display as slideshow'), 'cast' => 'intval', 'validation' => 'isBool', 'type' => 'bool', ), ), 'submit' => array('title' => $this->l('Save')), ), ); return parent::getContent(); } public function displayForm() { $default_lang = (int) Configuration::get('PS_LANG_DEFAULT'); $pos_options = array( array( 'FAQ_BLOCK_COL' => 0, 'name' => $this->l('Dont show') ), array( 'FAQ_BLOCK_COL' => 1, 'name' => $this->l('Left column') ), array( 'FAQ_BLOCK_COL' => 2, 'name' => $this->l('Right column') ), ); $categories = FAQCategory::getCategories($this->context->language->id, false); $cat_options = FAQCategory::recurseFAQCategoryOptions($categories, $categories[0][1], 1, 'FAQ_BLOCK_CAT'); $fields_form[0]['form'] = array( 'legend' => array( 'title' => $this->l('Settings') ), 'input' => array( array( 'type' => 'select', 'label' => $this->l('FAQ block position:'), 'name' => 'FAQ_BLOCK_COL', 'required' => true, 'options' => array( 'query' => $pos_options, 'id' => 'FAQ_BLOCK_COL', 'name' => 'name' ) ), array( 'type' => 'text', 'label' => $this->l('FAQ block title:'), 'name' => 'FAQ_BLOCK_NAME', 'size' => 20, 'lang' => true, 'required' => true ), array( 'type' => 'text', 'label' => $this->l('Number to show:'), 'name' => 'FAQ_BLOCK_NUM', 'size' => 1, 'required' => true ), array( 'type' => 'select', 'label' => $this->l('FAQ Category:'), 'name' => 'FAQ_BLOCK_CAT', 'required' => true, 'options' => array( 'query' => $cat_options, 'id' => 'FAQ_BLOCK_CAT', 'name' => 'name' ) ), ), 'submit' => array( 'title' => $this->l('Save'), 'class' => 'button' ) ); $helper = new HelperForm(); $helper->module = $this; $helper->name_controller = $this->name; $helper->token = Tools::getAdminTokenLite('AdminModules'); $helper->currentIndex = AdminController::$currentIndex . '&configure=' . $this->name; $helper->identifier = $this->identifier; $helper->default_form_language = $default_lang; $helper->allow_employee_form_lang = $default_lang; $helper->languages = Language::getLanguages(false); foreach ($helper->languages as $k => $language) $helper->languages[$k]['is_default'] = ((int) ($language['id_lang'] == $default_lang)); $helper->title = $this->displayName; $helper->show_toolbar = true; $helper->toolbar_scroll = true; $helper->submit_action = 'submit' . $this->name; $helper->toolbar_btn = array( 'save' => array( 'desc' => $this->l('Save'), 'href' => AdminController::$currentIndex . '&configure=' . $this->name . '&save' . $this->name . '&token=' . Tools::getAdminTokenLite('AdminModules'), ), 'back' => array( 'href' => AdminController::$currentIndex . '&token=' . Tools::getAdminTokenLite('AdminModules'), 'desc' => $this->l('Back to list') ) ); foreach (Language::getLanguages(false) as $language) { if (Tools::getValue('FAQ_BLOCK_NAME_' . $language['id_lang'])) $helper->fields_value['FAQ_BLOCK_NAME'][$language['id_lang']] = Tools::getValue('FAQ_BLOCK_NAME_' . $language['id_lang']); else $helper->fields_value['FAQ_BLOCK_NAME'][$language['id_lang']] = Configuration::get('FAQ_BLOCK_NAME', $language['id_lang']); } if (Tools::getValue('FAQ_BLOCK_COL')) $helper->fields_value['FAQ_BLOCK_COL'] = Tools::getValue('FAQ_BLOCK_COL'); else $helper->fields_value['FAQ_BLOCK_COL'] = Configuration::get('FAQ_BLOCK_COL'); if (Tools::getValue('FAQ_BLOCK_NUM')) $helper->fields_value['FAQ_BLOCK_NUM'] = Tools::getValue('FAQ_BLOCK_NUM'); else $helper->fields_value['FAQ_BLOCK_NUM'] = Configuration::get('FAQ_BLOCK_NUM'); if (Tools::getValue('FAQ_BLOCK_CAT')) $helper->fields_value['FAQ_BLOCK_CAT'] = Tools::getValue('FAQ_BLOCK_CAT'); else $helper->fields_value['FAQ_BLOCK_CAT'] = Configuration::get('FAQ_BLOCK_CAT'); return $helper->generateForm($fields_form); } public function renderCategoryTree($field) { require_once dirname(__FILE__) . '/classes/helpers/HelperTreeFaq.php'; $this->context->controller->addJS($this->getFramePathUri() . 'js/tree.js'); $this->context->controller->addCSS($this->getFramePathUri() . 'css/tree.css'); $tree = new InixHelper2TreeFaq($field['tree']['id'], isset($field['tree']['title']) ? $field['tree']['title'] : null); if (isset($field['name'])) $tree->setInputName($field['name']); if (isset($field['tree']['selected_categories'])) $tree->setSelectedCategories($field['tree']['selected_categories']); if (isset($field['tree']['disabled_categories'])) $tree->setDisabledCategories($field['tree']['disabled_categories']); if (isset($field['tree']['root_category'])) $tree->setRootCategory($field['tree']['root_category']); if (isset($field['tree']['use_search'])) $tree->setUseSearch($field['tree']['use_search']); if (isset($field['tree']['use_checkbox'])) $tree->setUseCheckBox($field['tree']['use_checkbox']); $tree->setModule($this); return $tree->render(); } public function hookModuleRoutes($params) { return array( 'faq_category_rule' => array( 'controller' => 'category', 'rule' => 'faq/{id}-{rewrite}', 'keywords' => array( 'id' => array('regexp' => '[0-9]+', 'param' => 'id_faq_category'), 'rewrite' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), 'meta_keywords' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), 'meta_title' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), 'fc' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), 'controller' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), 'module' => array('regexp' => '[_a-zA-Z0-9-\pL]*'), ), 'params' => array( 'fc' => 'module', 'module' => 'faqextra', 'controller' => 'category', ), ) ); } public function hookFooter($params) { if (!$this->context->controller instanceof CmsController) return; $this->context->controller->addCSS($this->getFramePathUri() . 'css/bootstrap.css'); $this->context->controller->addJS($this->getFramePathUri() . 'js/vendor/bootstrap.min.js'); $this->context->controller->addCSS($this->getFramePathUri() . 'css/style.css'); $cms = $this->context->smarty->getVariable('cms'); $cms = $cms->value; if(Tools::version_compare(_PS_VERSION_,'1.7')) { if (isset($cms->content) && !empty($cms->content)) { $cms->content = $this->doShortcode($cms->content); } } else{ if (isset($cms['content']) && !empty($cms['content'])) { $page_content = ob_get_contents(); $new_tpl = $this->doShortcode($page_content); ob_get_clean(); echo $new_tpl; } } } private function doShortcode($string, $shortcode = 'faq') { preg_match_all('/\[(.*?):(.*?)\]/', $string, $matches); foreach ($matches[1] as $k => $m) { if ($m == $shortcode) { $pos = strpos($string, $matches[0][$k]); if ($pos !== false) { $string = substr_replace($string, $this->prepareFaq($matches[2][$k]), $pos, strlen($matches[0][$k])); } } } return $string; } private function prepareFaq($id_faq_category) { if (!Validate::isUnsignedId($id_faq_category)) return; if (!Validate::isLoadedObject($faq = new FAQCategory((int) $id_faq_category, $this->context->language->id))) ; $id_shop = null; if (Shop::isFeatureActive()) $id_shop = (int) $this->context->shop->id; $id_lang = $this->context->language->id; $faq_categories = array($faq); $faq_pages = array(); $faq_pages[$faq->id] = FAQ::getFAQPages($id_lang, $faq->id, true, $id_shop); $this->context->smarty->assign(array( 'faq_categories' => $faq_categories, 'faq_pages1' => $faq_pages )); return $this->display(__FILE__, 'cms.tpl'); } } 